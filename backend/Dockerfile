# Создать образ на основе базового слоя,
# который содержит файлы ОС и интерпретатор Python 3.9.
FROM python:3.9

# Переходим в образе в директорию /app: в ней будем хранить код проекта.
# Если директории с указанным именем нет, она будет создана. 
# Название директории может быть любым.
WORKDIR /app
# Дальнейшие инструкции будут выполняться в директории /app

# Установка gunicorn.
RUN pip install gunicorn==20.1.0

# Скопировать с локального компьютера файл зависимостей
# в текущую директорию (текущая директория — это /app).
COPY requirements.txt .

# Выполнить в текущей директории команду терминала
# для установки зависимостей.
# Если не использовать параметр --no-cache-dir, 
# то pip сохранит в служебной директории (прямо в образе) копии пакетов,
# а это будет лишним грузом.
RUN pip install -r requirements.txt --no-cache-dir

# Скопировать всё необходимое содержимое 
# той директории локального компьютера, где сохранён Dockerfile,
# в текущую рабочую директорию образа — /app.
COPY . .

# При старте контейнера запустить сервер разработки.
# CMD ["python", "manage.py", "runserver", "0:8000"]

# Или gunicorn.
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "backend.wsgi"]

# В Dockerfile срабатывает только одна инструкция CMD.
# Если этих инструкций несколько, выполнится только та,
# что записана последней;

# Параметры инструкции CMD указываются в виде JSON-массива,
# элементы массива заключаются в двойные кавычки;

# Первым элементом указывается исполняемый файл,
# например, интерпретатор Python; следом указываются параметры
# для запуска исполняемого файла.
